// This file is generated by bindgen
// Do not modify this file manually!

declare module 'breeze' {

export class filesystem {
	/**
     * 
     * @param path: string
     * @returns string
     */
    static readFileAsStringSync(path: string): string
	/**
     * 
     * @param path: string
     * @returns Promise<string>
     */
    static readFileAsString(path: string): Promise<string>
	/**
     * 
     * @param path: string
     * @param options: filesystem.ReadDirOptions | undefined
     * @returns Promise<Array<string>>
     */
    static readdir(path: string, options?: filesystem.ReadDirOptions | undefined): Promise<Array<string>>
	/**
     * 
     * @param path: string
     * @param options: filesystem.ReadDirOptions | undefined
     * @returns Array<string>
     */
    static readdirSync(path: string, options?: filesystem.ReadDirOptions | undefined): Array<string>
	/**
     * 
     * @param path: string
     * @param options: filesystem.MkDirOptions | undefined
     * @returns Promise<boolean>
     */
    static mkdir(path: string, options?: filesystem.MkDirOptions | undefined): Promise<boolean>
	/**
     * 
     * @param path: string
     * @param options: filesystem.MkDirOptions | undefined
     * @returns boolean
     */
    static mkdirSync(path: string, options?: filesystem.MkDirOptions | undefined): boolean
	/**
     * 
     * @param path: string
     * @returns boolean
     */
    static exists(path: string): boolean
	/**
     * 
     * @param path: string
     * @param options: filesystem.RmOptions | undefined
     * @returns Promise<boolean>
     */
    static rm(path: string, options?: filesystem.RmOptions | undefined): Promise<boolean>
	/**
     * 
     * @param path: string
     * @param options: filesystem.RmOptions | undefined
     * @returns boolean
     */
    static rmSync(path: string, options?: filesystem.RmOptions | undefined): boolean
	/**
     * 
     * @param path: string
     * @param content: string
     * @returns Promise<boolean>
     */
    static writeStringToFile(path: string, content: string): Promise<boolean>
}
namespace filesystem {
export class ReadDirOptions {
	recursive: boolean
	follow_symlinks: boolean
}
}
namespace filesystem {
export class MkDirOptions {
	recursive: boolean
}
}
namespace filesystem {
export class RmOptions {
	recursive: boolean
}
}
export class infra {
	/**
     * 
     * @param ms: number
     * @returns Promise<void>
     */
    static sleep(ms: number): Promise<void>
	/**
     *  This is a blocking sleep, not recommended in JS context
     *  Use sleep() instead for non-blocking sleep
     * @param ms: number
     * @returns void
     */
    static sleepSync(ms: number): void
	/**
     *  Breeze uses a low resolution timer (30ms) for setTimeout and setInterval
     *  due to performance concerns.
     *  Use sleep() for more precise timing if needed.
     * @param callback: (() => void)
     * @param ms: number
     * @returns number
     */
    static setTimeout(callback: (() => void), ms: number): number
	/**
     *  Breeze uses a low resolution timer (30ms) for setTimeout and setInterval
     *  due to performance concerns.
     *  Use sleep() for more precise timing if needed.
     * @param callback: (() => void)
     * @param ms: number
     * @returns number
     */
    static setInterval(callback: (() => void), ms: number): number
	/**
     * 
     * @param id: number
     * @returns void
     */
    static clearTimeout(id: number): void
	/**
     * 
     * @param id: number
     * @returns void
     */
    static clearInterval(id: number): void
	/**
     * 
     * @param base64: string
     * @returns string
     */
    static atob(base64: string): string
	/**
     * 
     * @param str: string
     * @returns string
     */
    static btoa(str: string): string
}
namespace infra {
export class URLSearchParams {
	list: Array<[string, string]>
	size(): number
	/**
     * 
     * @param name: string
     * @param value: string
     * @returns void
     */
    append(name: string, value: string): void
	/**
     * 
     * @param name: string
     * @param value: string
     * @returns void
     */
    remove(name: string, value: string): void
	/**
     * 
     * @param name: string
     * @returns string
     */
    get(name: string): string
	/**
     * 
     * @param name: string
     * @returns Array<string>
     */
    getAll(name: string): Array<string>
	/**
     * 
     * @param name: string
     * @param value: string
     * @returns boolean
     */
    has(name: string, value: string): boolean
	/**
     * 
     * @param name: string
     * @param value: string
     * @returns void
     */
    set(name: string, value: string): void
	sort(): void
	toString(): string
}
}
namespace infra {
export class URL {
	/**
     * 
     * @param url_string: string
     * @param base_string: string
     * @returns infra.URL
     */
    static parse(url_string: string, base_string: string): infra.URL
	/**
     * 
     * @param url_string: string
     * @param base_string: string
     * @returns boolean
     */
    static canParse(url_string: string, base_string: string): boolean
	get_href(): string
	/**
     * 
     * @param new_href: string
     * @returns void
     */
    set_href(new_href: string): void
	origin(): string
	get_protocol(): string
	/**
     * 
     * @param new_protocol: string
     * @returns void
     */
    set_protocol(new_protocol: string): void
	get_username(): string
	/**
     * 
     * @param new_username: string
     * @returns void
     */
    set_username(new_username: string): void
	get_password(): string
	/**
     * 
     * @param new_password: string
     * @returns void
     */
    set_password(new_password: string): void
	get_host(): string
	/**
     * 
     * @param new_host: string
     * @returns void
     */
    set_host(new_host: string): void
	get_hostname(): string
	/**
     * 
     * @param new_hostname: string
     * @returns void
     */
    set_hostname(new_hostname: string): void
	get_port(): string
	/**
     * 
     * @param new_port: string
     * @returns void
     */
    set_port(new_port: string): void
	get_pathname(): string
	/**
     * 
     * @param new_pathname: string
     * @returns void
     */
    set_pathname(new_pathname: string): void
	get_search(): string
	/**
     * 
     * @param new_search: string
     * @returns void
     */
    set_search(new_search: string): void
	get_searchParams(): infra.URLSearchParams
	get_hash(): string
	/**
     * 
     * @param new_hash: string
     * @returns void
     */
    set_hash(new_hash: string): void
	toJSON(): string
}
}
export class test {
	static testAsync(): Promise<number>
}
}

