// This file is generated by Breeze.JS Bindgen (https://github.com/breeze-shell/breeze-js-bindgen)
// Do not modify this file manually!

#pragma once
#include "binding_types.h"
#include "quickjs.h"
#include "quickjspp.hpp"

template <typename T>
struct js_bind {
    static void bind(qjs::Context::Module &mod) {}
};

template <> struct qjs::js_traits<breeze::js::filesystem> {
    static breeze::js::filesystem unwrap(JSContext *ctx, JSValueConst v) {
        breeze::js::filesystem obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const breeze::js::filesystem &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<breeze::js::filesystem> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<breeze::js::filesystem>("filesystem")
            .constructor<>()
                .static_fun<&breeze::js::filesystem::readFileSync>("readFileSync")
            ;
    }
};

template <> struct qjs::js_traits<breeze::js::test> {
    static breeze::js::test unwrap(JSContext *ctx, JSValueConst v) {
        breeze::js::test obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const breeze::js::test &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<breeze::js::test> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<breeze::js::test>("test")
            .constructor<>()
                .static_fun<&breeze::js::test::testAsync>("testAsync")
            ;
    }
};

inline void bindAll(qjs::Context::Module &mod) {

    js_bind<breeze::js::filesystem>::bind(mod);

    js_bind<breeze::js::test>::bind(mod);

}
